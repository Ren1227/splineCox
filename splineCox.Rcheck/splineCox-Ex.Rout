
R version 4.2.1 (2022-06-23 ucrt) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "splineCox"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "splineCox-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('splineCox')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("splineCox.reg1")
> ### * splineCox.reg1
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: splineCox.reg1
> ### Title: Fitting the five-parameter spline Cox model giving a specified
> ###   shape
> ### Aliases: splineCox.reg1
> 
> ### ** Examples
> 
> # Example data
> library(joint.Cox)
Warning: package 'joint.Cox' was built under R version 4.2.3
Loading required package: survival
> data(dataOvarian)
> t.event = dataOvarian$t.event
> event = dataOvarian$event
> Z = dataOvarian$CXCL12
> 
> reg1 <- splineCox.reg1(t.event, event, Z, model = "constant")
> print(reg1)
$model
[1] "constant"

$parameter
[1] 0.125 0.250 0.250 0.250 0.125

$beta
  estimate         SE      Lower      Upper 
0.21342140 0.04250986 0.13010207 0.29674073 

$gamma
 estimate        SE     Lower     Upper 
4.8603503 0.2037146 4.4610697 5.2596309 

$loglik
LogLikelihood           AIC           BIC 
    -4603.751      9211.501      9221.323 

> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("splineCox.reg1", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching 'package:joint.Cox', 'package:survival'

> nameEx("splineCox.reg2")
> ### * splineCox.reg2
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: splineCox.reg2
> ### Title: Fitting the five-parameter spline Cox model with a specified
> ###   shape, selecting the best fit
> ### Aliases: splineCox.reg2
> 
> ### ** Examples
> 
> # Example data
> library(joint.Cox)
Warning: package 'joint.Cox' was built under R version 4.2.3
Loading required package: survival
> data(dataOvarian)
> t.event = dataOvarian$t.event
> event = dataOvarian$event
> Z = dataOvarian$CXCL12
> 
> M = c("constant", "increase", "decrease")
> reg2 <- splineCox.reg2(t.event, event, Z, model = M)
> print(reg2)
$model
[1] "constant"

$parameter
[1] 0.125 0.250 0.250 0.250 0.125

$beta
  estimate         SE      Lower      Upper 
0.21342140 0.04250986 0.13010207 0.29674073 

$gamma
 estimate        SE     Lower     Upper 
4.8603503 0.2037146 4.4610697 5.2596309 

$loglik
LogLikelihood           AIC           BIC 
    -4603.751      9211.501      9221.323 

$other_loglik
         Loglikelihodd
increase     -4629.807
decrease     -4611.546

> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("splineCox.reg2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()

detaching 'package:joint.Cox', 'package:survival'

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.05 0.14 1.22 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
